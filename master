```java
public Boolean isValidReportedOn(LocalDate reportedOn)
 {
	// Your Code Goes Here
     if(reportedOn.isAfter(LocalDate.now())|| reportedOn==null) {
	 return false;
     }

return true;
 }
```

```java
@Entity-import JavaX.Persistance.Enity
@Table-import Javax.Persistance.Table
@Id-import JavaX.Persistance.Id
@NotNull-import JavaX.Validation.Constraint.NotNull
@Valid-import JavaX.Validation.Valid
@MIN-import JavaX.Validation.Constraint.MIN;
@MAX-import JavaX.Validation.Constraint.MAX
@Column-import javax.persistance.column;
@GeneratedValue-import javax.persistance.generatedValue
@ManyToOne-import javax.persistance.ManyToOne;
@JoinColumn-import JavaX.Persistance.JoinColumn
CrudRepository<T,ID> -import org.springframework.data.repository.crudrepository
@Service-import org.springframework.stereotype.service
@Transactional-import javax.transaction.transction
@Autowired-import org.springframework.beans.factory.annotation.autowired'
optional-import java.util.optional
arraylist-import java.util.arraylist;
@RestController-import org.springframework.web.bind.annotaion.RestController
@ExceptionHandler-import org.springframework.web.bind.annotaion.ExceptionHandler
@Component-import org.springframework.sterotype.component;
@aspect-org.aspectj.lang.annotation.aspect
@afterthrowing-import org.aspectjlang.annotation.afterthrowing;
@SpringBootTest-import org.springframework.boot.test.context.springboottest;
@Mock-import org.mockito.mock
@InjectMock-import org.mockito.injectmocks
@Test-import org.junit.jupiter.api.test
@SpringBootApplciation-import org.sprinframework.boot.springapplication
```

# annotations def

```java
1.@PathVariable annotation is used to extract the value from the URI. It is most suitable for the RESTful web service where the URL 
contains some value. Spring MVC allows us to use multiple @PathVariable annotations in the same method. A path variable is a critical 
part of creating rest resources.

2.@RequestParam is used to extract query parameters while @PathVariable is used to extract data right from the URI. ... Even though 
both are used to extract data from URL, @RequestParam is used to retrieve query parameters, anything after? in the URL, while 
@PathVariable is used to retrieve values from URI itself.

3.@PathVariable annotation is used for data passed in the URI (e.g. RESTful web services) while @RequestParam is used to extract the data 
found in query parameters.
```

# common mistakes

```java
Common Mistakes in FA2 HON scripts
•    The Entity does not map with the table due to missing ‘@Column’ annotations
•    Altered method definitions in already implemented code
•    Missing curly braces in message values of Java bean Validation constraints. For example, ‘@NotNull(message=’’some.error.message”)’ instead of ‘@NotNull(message=”{some.error.message}”)’.
•    Imports from incorrect packages. For example, Optional class is imported from ‘com.google.coommon.base’ instead of ‘java.util’
•    Incorrect pointcut expression in the AOP Aspect class
•    Application fails to start due to ambiguous Exception Handlers methods
•    The URI in RestController class does not match with the URI provided in question description
•    Uncommented property ‘spring.datasource.password=root’ in application.properties
•    @Transanctional should be import from spring package, sometime you may import from javax package.

•    Copy the properties from application.properties or ValidationMessages.properties file instead of typing manually
```

# instructions and tricks

```java
steps to remember

1.for eclipse workspace create folder on desk name worksapce witch to that folder 

2.exam\

3.folder will be downloaded with two folders project and worksapce

4.import that project as a maven project

5.update maven

6.for pdm 

windows->pref->pmd->rule config->global box->select rule->delete
->import->import by copy->browse ruleset->apply 

7.comment password in table.sql file 

8.rum table script 

open cmd two windows 

window1- mysqld --console

windows2- mysql -u root 

//how to deal with the project 

1.entity class (javax.pres)

-@enitity
-@table
-@id for pk 
-check column name 
-check mapping 
-@ManyToOne(cascade=cascade.Type.ALL)
JoinColumn(name=" ")
-OneToMany(cascadeType.ALL)
JoinColumn(name=" ")

@OneToOne

-for autogeneration(ident.strategy)

GeneratedValue(Strategy=GenerationType.IDENTITY)

2.REPOSITORY CLASS(org.springf.data)

extends crudrepo 

3.service class 

-@service(value=" ") (org.springf.str)
-@transcational
-@autowrired

4.api class

@restcontroller 
@requestmapping(value=" ")
@validated 
@autowired
@postmapping(value=" ")-@requestbody @valid 
@getmapping(value= "")->@pathvariable

5. dto class 

perform validations 
@putmapping(value="") ->@pathvariable
@deletenmapping(valuee="")->@pathvariable
check if path variabvle has to be v alidated
check if there is no sapce in {}

take backup 

6.utility class or aspect class 

@Component 
@Aspect 

@AfterThrowing(pointcut="execution(*_com.infy.servce.*impl.*(...))",throwing="exception")
Logger.error(e.getM,e);

6.exceptioncontroller class 

@restcontrolleradvice
@autowired
@exceptionhandler(name.class)
@exceptionhandler

7.test class

@springbootest
@mock
@injectmock
@test-or.junit,jupiter
```

# final pdf compiled

```java
FA2 HANDS ON WHAT TO DO IN EVERY FILE: -

SUGGESTED WAY TO SOLVE IN TIME: -

• Start with Utitlity class (aspect class)

• Implement Entity mapping

• Implement Repo and Service

• Implement API and with It Validation in DTO

• Implement Testing

• TEST AND VERIFY

Before Starting: -

• Execute the table script.

• In application.properties comment password line. 

• In application.properties add sql credentials if not given using spring.datasource.username=root

1.API: -

• Class level annotations: - 
import following required imports
[ @RestController ] 
[ @RequestMapping(value = “/whatever_value”) ] 
[ @Validated ] for path variable validation 
i.e. [ @PathVariable ] use appropriate validations 
acc. to question paper.

• Autowiring of service and environment.

• Implement acc. to question paper. 
i.e. [ @PutMapping(value = “_______”) ] 
[ @GetMapping(value = “_______”) ] 
[ @PostMapping(value = “_______”) ] 
[ @DeleteMapping(value = “_______”) ] 

• For request body i.e. [ @RequestBody ] 
validation use [ @Valid ] in front of it.

2.DTO: -
• Implement validation as mentioned in API. 

• If aggregation is there use [ @Valid ]

3.Entity: - • Map Entity to Table. [ @Entity ] 
If table name is different use [ @Table(name=“whatever_name”) ]

• Map ID (i.e., primary key) of every table [ @Id ] 
and Implement Generation of Id if given 

1) By using Identity Strategy: - [ @GeneratedValue(strategy = GenerationType.IDENTITY) ]

2) By using Table Strategy default table (i.e. hibernate_sequences) :- 
[ @GeneratedValue(strategy = GenerationType.TABLE) ]

3) By using Table Strategy custom table: - 

[ @TableGenerator( name = “table_gen_name”, table = “table name using which to create id”, pkColumnName = ”gen_key”, valueColumnName = “gen_value”, pkColumnValue = “attribute name in table i.e., pk name”, allocationSize = 1)
] 

[ @GeneratedValue(strategy = GenerationType.TABLE) ] 

4) By using Auto Strategy: - [ @GeneratedValue(strategy = GenerationType.AUTO) ]

• If column name is different use [ @Column(name="whatever_name") ]
• If an attribute is extra (i.e., not present in table) use [ @Transient ]
• If an attribute is of enumerated type: -
1) If String Value use [ @Enumerated(EnumType.STRING) ] 
2) If Integer like type use [ @Enumerated(EnumType.ORDINAL) ]

• Mapping Relation Ships in entity: -
1) One-To-One Relationship: - @OneToOne(cascade = CascadeType.ALL) @JoinColumn(name = "address_id", unique = true)
private Customer customer;

2) Many-To-One Relationship: - @ManyToOne(cascade=CascadeType.ALL) @JoinColumn(name="cust_id")
private Customer customer;

3) One-To-Many Relationship: - @OneToMany(cascade=CascadeType.ALL)

@JoinColumn(name="cust_id")
private List<Card> cards;

4.Exception: -
No changes to be done

5.Repository (Interface): - 

• Extend to [ CrudRepository<Entity,pkType> ] 
e.g.:- CrudRepository<Director,String> 

OR 

[ PagingAndSortingRepository<Entity,pkType> ] 
e.g.:- PagingAndSortingRepository<Transaction,Integer> 
acc. to the question if not already extended.

• Implement Additional Methods Acc. to the questions: -
Some examples: -

List<Book> findByAuthorName(String authorName);
List<Book> findFirst2ByAuthorName(String authorName);
List<Book> findByPriceGreaterThanEqual(Integer price);
List<Book> findByPriceLessThan(Integer price);
List<Book> findByPublishedYearBetween(LocalDate fromDate,LocalDate toDate);
List<Book> findByPublishedYearAfter(LocalDate publishedYear);
List<Book> findByAuthorNameAndPublisher(String authorName,String publisher);

Some examples for paging and sorting: -
List<Player> findFirst7ByDebutDateAfter(String date, Pageable p);
List<Player> findByCountry(String country,Sort sort);

6.Service (Impl): - 

• At top [ @Service(value = “movieService etc..”) ] and [ @Transactional ] 

• Do autowirring of Repository attribute using [ @Autowired ]

• Implement acc. to question paper.

• Paging Implementation example for reference:-

@Override
public List<PlayerDTO> getAllPlayersByDebutDateAfter(String debutDate, int i, int j) throws InfyPlayerException {
Pageable p = PageRequest.of(i,j);
List<Player> transactions = playerRepository.findFirst7ByDebutDateAfter(debutDate,p);
if(transactions.isEmpty()){
throw new InfyPlayerException("Service.NO_PLAYERS_IN_THIS_PAGE");
}
List<PlayerDTO> playerDTOList = new ArrayList<>();
transactions.forEach(player -> {
PlayerDTO playerDTO = new PlayerDTO(player.getPlayerId(),
player.getPlayerName(),
player.getRanking(),

player.getBattingStyle(),
player.getBowlingStyle(),
player.getDebutDate(),
player.getCountry());
playerDTOList.add(playerDTO);
});
return playerDTOList;
}

@Override
public List<PlayerDTO> getAllPlayersSortedByRanking(Sort sort) throws InfyPlayerException {
Iterable<Player> transactions = playerRepository.findAll(sort);
List<PlayerDTO> playerDTOList = new ArrayList<>();
transactions.forEach(player -> {
PlayerDTO playerDTO = new PlayerDTO(player.getPlayerId(),
player.getPlayerName(),
player.getRanking(),
player.getBattingStyle(),
player.getBowlingStyle(),
player.getDebutDate(),
player.getCountry());
playerDTOList.add(playerDTO);
});
if(playerDTOList.isEmpty()){
throw new InfyPlayerException("Service.NO_PLAYERS_IN_THIS_PAGE");
}
return playerDTOList;
}

@Override
public List<PlayerDTO> getAllPlayersOfCountrySortedByRanking(String country, Sort sort) throws InfyPlayerException {
List<Player> playerList = playerRepository.findByCountry(country,sort);
if(playerList.isEmpty()){
throw new InfyPlayerException("Service.NO_PLAYERS_IN_THIS_PAGE");
}
List<PlayerDTO> playerDTOList = new ArrayList<>();
playerList.forEach(player -> {
PlayerDTO playerDTO = new PlayerDTO(player.getPlayerId(),
player.getPlayerName(),
player.getRanking(),
player.getBattingStyle(),
player.getBowlingStyle(),
player.getDebutDate(),
player.getCountry());
playerDTOList.add(playerDTO);
});
return playerDTOList;
}

7.Utility: -
• Implement Logging Aspect

Example:-

public class LoggingAspect {
public static final Log LOGGER = LogFactory.getLog(LoggingAspect.class);
@AfterThrowing(pointcut = "execution(* com.infy.service.*Impl.*(..))", throwing = "exception")
public void logServiceException(Exception exception) {
LOGGER.error(exception.getMessage(), exception);
}
}

*Note:- In pointcut use the given pointcut in QP otherwise no 100% structural verification.

8.ExceptionControllerAdvice: -

• Implement ExceptionControllerAdvice 

1) Annotate class with [ @RestControllerAdvice ]

2) Autowire environment

3) Implement acc to QP : -

EXAMPLE: -

@ExceptionHandler(InfyInternException.class)
public ResponseEntity<ErrorInfo> InfyInternExceptionHandler(InfyInternException exception)
{
LOGGER.error(exception.getMessage(), exception);
ErrorInfo errorInfo = new ErrorInfo();
errorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());
errorInfo.setErrorMessage(environment.getProperty(exception.getMessage()));
return new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);
}

@ExceptionHandler(Exception.class)
public ResponseEntity<ErrorInfo> generalExceptionHandler(Exception exception)
{
LOGGER.error(exception.getMessage(), exception);
ErrorInfo errorInfo = new ErrorInfo();

errorInfo.setErrorCode(HttpStatus.INTERNAL_SERVER_ERROR.value());
errorInfo.setErrorMessage(environment.getProperty("General.EXCEPTION_MESSAGE"));
return new ResponseEntity<>(errorInfo,
HttpStatus.INTERNAL_SERVER_ERROR);
}

@ExceptionHandler({MethodArgumentNotValidException.class, ConstraintViolationException .class})
public ResponseEntity<ErrorInfo> validatorExceptionHandler(Exception exception)
{
LOGGER.error(exception.getMessage(), exception);
String errorMsg;
if (exception instanceof MethodArgumentNotValidException)
{
MethodArgumentNotValidException manvException = (MethodArgumentNotValidException) exception;
errorMsg = manvException.getBindingResult()
.getAllErrors()
.stream()
.map(ObjectError::getDefaultMessage)
.collect(Collectors.joining(", "));
}
else
{
ConstraintViolationException cvException = (ConstraintViolationException) exception;
errorMsg = cvException.getConstraintViolations()
.stream()
.map(ConstraintViolation::getMessage)
.collect(Collectors.joining(", "));
}
ErrorInfo errorInfo = new ErrorInfo();
errorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());
errorInfo.setErrorMessage(errorMsg);
return new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);
}

9.Testing: - 

• Annotate at classlevel using [ @SpringBootTest ] 

• Use [ @Mock ] on Repository.
Eg: -
@Mock

private MentorRepository mentorRepository;

• Use [ @InjectMocks ] on Service.
Eg: -@InjectMocks
private ProjectAllocationService projectAllocationService = new ProjectAllocationServiceImpl();

• Annotate all test methods with [ @Test ]

eg - 

package com.infy.infyinterns;

import java.time.LocalDate;
import java.util.Optional;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mocktio;
import org.springframework.boot.test.context.SpringBootTest;

import com.infy.infyinterns.dto.MentorDTO;
import com.infy.infyinterns.dto.ProjectDTO;
import com.infy.infyinterns.entity.Mentor;
import com.infy.infyinterns.exception.InfyInternException;
import com.infy.infyinterns.repository.MentorRepository;
import com.infy.infyinterns.service.ProjectAllocationService;
import com.infy.infyinterns.service.ProjectAllocationServiceImpl;

@SpringBootTest

public class InfyInternsApplicationTests
{

@Mock
private MentorRepository mentorRepository;

@InjectMocks
private ProjectAllocationService projectAllocationService=new ProjectAllocationServiceImpl();

@Test
public void allocateProjectCannotAllocateTest() throws Exception
{
ProjectDTO projectDTO=new ProjectDTO();
projectDTO.setIdeaOwner(10009);
projectDTO.setProjectName("Android Shopping App");
projectDTO.setReleaseDate(LocalDate.of(2019,9,25));
MentorDTO mentorDTO=new MentorDTO();
mentorDTO.setMentorDTO(1009);
projectDTO.setMentorDTO(mentorDTO);
Mentor mentor=new Mentor();
mentor.setMentorId(1009);
mentor.setMentorName("john");
mentor.setNumberOfProjectsMentored(4);

Mockito.<Optional><Mentor>>when(mentorRespository.findById(mentorDTO.getMentorId())).thenReturn(Optional.of(mentor));
InfyInterException iIE=Assertions.assertThrows(InfyInternException.class,
()->projectAllocationService.allocateProject(projectDTO));
Assertions.assertEquals("Service.CANNOT_ALLOCATE_PROJECT",iIE.getMessage());
}
```

# exam pattern

```java
in exam 

total 6 classes -to be implemented
1.EventRepository
2.ParticipantRepository
3.EventServiceImpl
4.EventAPI
5.LoggingAspect
6.EventReistrationApplicationTests

total 4 classes-partially implemented 

1.Event 
2.Participant
3.ParticipantDTO
4.ExceptionControllerAdvice
```

# capstone project

```java

in exam 

6 class-to be implemented
4 classes-partially implemented 

1.//ProjectAllocationApi class

package com.infy.infyinterns.api;

import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Enviroment;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.DeleteMapping
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import org.springframework.http.ResponseEntity;

import com.infy.infyinterns.dto.MentorDTO;
import com.infy.infyinterns.dto.ProjectDTO;
import com.infy.infyinterns.exception.InfyInternException;

@RestController
@Validated
@RequestMapping(value="/infyinterns")
public class ProjectAllocationAPI
{
    @AutoWired
    private ProjectAllocationService projectService;
    @AutoWired
    private Environment environment;

    // add new project along with mentor details

    @PostMapping(value="/project")
    public ResponseEntity<String> allocateProject(@RequestBody @Valid ProjectDTO project) throws InfyInternException
    {

       Integer projId=projectService.allocateProject(project);

	return new ResponseEntity<>(environment.getProperty("API.ALLOCATION_SUCCESS")+projId,HttpStatus.CREATED);
    }

    // get mentors based on idea owner
    @GetMapping(value= "mentor/{numberofProjectMentored}")
    public ResponseEntity<List<MentorDTO>> getMentors(@PathVariable Integer numberOfProjectsMentored) throws InfyInternException
    {

	return new ResponseEntity<>(projectService.getMentors(numberOfProjectsMentored),HttpStatus.OK);
    }

    // update the mentor of a project

    @PutMapping(value="project/{ projectId }/{ mentorId }")  
    public ResponseEntity<String> updateProjectMentor(@PathVariable Integer projectId,@PathVariable @Min(value=1000,message="{mentor.mentorid.invalid}")
@Max(value=9999,message="{mentor.mentorid.invlaid}") Integer mentorId) throws InfyInternException

    {
	return new  ResponseEntity<>(environment.getProperty("API.PROJECT_UPDATE_SUCCESS"),HttpStatus.OK);
    }

    // delete a project

@DeleteMapping(value= "project/{projectId}")
    public ResponseEntity<String> deleteProject(@PathVariable Integer projectId) throws InfyInternException
    {
     projectService.deleteProject(projectId);
	return new ResponseEntity<>(environment.getProperty("API.PROJECT_DELETE_SUCCESS"),HttpStatus.OK);
    }

}

2.//MentorDTO class(partially implemented)

package com.infy.infyinterns.dto;

import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;

public class MentorDTO {

  @NotNull(message="{mentor.mentorid.absent}")
  @Min(value=1000, message= "{mentor.mentorid.invalid}")
  @Max(value=9999, message= "{mentor.mentorid.invalid}")
	private Integer mentorId;
	private String mentorName;
	private Integer numberOfProjectsMentored;

	public MentorDTO() {
		super();
	}

	public MentorDTO(Integer mentorId, String mentorName, Integer numberOfProjectsMentored) {
		super();
		this.mentorId = mentorId;
		this.mentorName = mentorName;
		this.numberOfProjectsMentored = numberOfProjectsMentored;
	}

	public Integer getMentorId() {
		return mentorId;
	}

	public void setMentorId(Integer mentorId) {
		this.mentorId = mentorId;
	}

	public String getMentorName() {
		return mentorName;
	}

	public void setMentorName(String mentorName) {
		this.mentorName = mentorName;
	}

	public Integer getNumberOfProjectsMentored() {
		return numberOfProjectsMentored;
	}

	public void setNumberOfProjectsMentored(Integer numberOfProjectsMentored) {
		this.numberOfProjectsMentored = numberOfProjectsMentored;
	}

}

3. //ProjectDTO class (partially implemented)

package com.infy.infyinterns.dto;

import java.time.LocalDate;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

public class ProjectDTO {

	private Integer projectId;
	
 @NotNull(message= "{project.projectname.absent}")
	private String projectName;

	@NotNull(message= "{project.ideaowner.absent}")
	private Integer ideaOwner;

	@NotNull(message= "{project.releasedate.absent}")
	private LocalDate releaseDate;

	@NotNull(message= "{project.mentor.absent}")
  @Valid
	private MentorDTO mentorDTO;

	public ProjectDTO() {
		super();
	}
	
	public ProjectDTO(Integer projectId, String projectName,
			Integer ideaOwner, LocalDate releaseDate,
			MentorDTO mentorDTO) {
		super();
		this.projectId = projectId;
		this.projectName = projectName;
		this.ideaOwner = ideaOwner;
		this.releaseDate = releaseDate;
		this.mentorDTO = mentorDTO;
	}

	public Integer getProjectId() {
		return projectId;
	}

	public void setProjectId(Integer projectId) {
		this.projectId = projectId;
	}

	public String getProjectName() {
		return projectName;
	}

	public void setProjectName(String projectName) {
		this.projectName = projectName;
	}

	public Integer getIdeaOwner() {
		return ideaOwner;
	}

	public void setIdeaOwner(Integer ideaOwner) {
		this.ideaOwner = ideaOwner;
	}

	public LocalDate getReleaseDate() {
		return releaseDate;
	}

	public void setReleaseDate(LocalDate releaseDate) {
		this.releaseDate = releaseDate;
	}

	public MentorDTO getMentorDTO() {
		return mentorDTO;
	}

	public void setMentorDTO(MentorDTO mentorDTO) {
		this.mentorDTO = mentorDTO;
	}

}

4. //mentor class (partially implemented)

package com.infy.infyinterns.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="mentor")
public class Mentor
{
    @Id
    private Integer mentorId;
    private String mentorName;
    @Column(name="projects_mentored")
    private Integer numberOfProjectsMentored;

    public Integer getMentorId()
    {
	return mentorId;
    }

    public void setMentorId(Integer mentorId)
    {
	this.mentorId = mentorId;
    }

    public String getMentorName()
    {
	return mentorName;
    }

    public void setMentorName(String mentorName)
    {
	this.mentorName = mentorName;
    }

    public Integer getNumberOfProjectsMentored()
    {
	return numberOfProjectsMentored;
    }

    public void setNumberOfProjectsMentored(Integer numberOfProjectsMentored)
    {
	this.numberOfProjectsMentored = numberOfProjectsMentored;
    }

    @Override
    public int hashCode()
    {
	final int prime = 31;
	int result = 1;
	result = prime * result
		 + ((mentorId == null) ? 0 : mentorId.hashCode());
	result = prime * result
		 + ((mentorName == null) ? 0 : mentorName.hashCode());
	result = prime * result
		 + ((numberOfProjectsMentored == null) ? 0
						       : numberOfProjectsMentored.hashCode());
	return result;
    }

    @Override
    public boolean equals(Object obj)
    {
	if (this == obj)
	    return true;
	if (obj == null)
	    return false;
	if (getClass() != obj.getClass())
	    return false;
	Mentor other = (Mentor) obj;
	if (this.getMentorId() == null)
	{
	    if (other.getMentorId() != null)
	    {
		return false;
	    }
	}
	else if (!this.getMentorId().equals(other.getMentorId()))
	    return false;
	return true;
    }

}

5. //project class(partially implemented)

package com.infy.infyinterns.entity;

import java.time.LocalDate;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

@Entity
@Table(name="project")
public class Project
{
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
    private Integer projectId;
    private String projectName;
    private Integer ideaOwner;
    private LocalDate releaseDate;
    @ManyToOne(cascade=CascadeType.ALL)
    @JoinColumn(name="mentor_id")
    private Mentor mentor;

    public Integer getProjectId()
    {
	return projectId;
    }

    public void setProjectId(Integer projectId)
    {
	this.projectId = projectId;
    }

    public LocalDate getReleaseDate()
    {
	return releaseDate;
    }

    public void setReleaseDate(LocalDate releaseDate)
    {
	this.releaseDate = releaseDate;
    }

    public String getProjectName()
    {
	return projectName;
    }

    public void setProjectName(String projectName)
    {
	this.projectName = projectName;
    }

    public Mentor getMentor()
    {
	return mentor;
    }

    public void setMentor(Mentor mentor)
    {
	this.mentor = mentor;
    }

    public Integer getIdeaOwner()
    {
	return ideaOwner;
    }

    public void setIdeaOwner(Integer ideaOwner)
    {
	this.ideaOwner = ideaOwner;
    }

    @Override
    public int hashCode()
    {
	return 31;
    }

    @Override
    public boolean equals(Object obj)
    {
	if (this == obj)
	    return true;
	if (obj == null)
	    return false;
	if (getClass() != obj.getClass())
	    return false;
	Project other = (Project) obj;
	if (this.getProjectId() == null)
	{
	    if (other.getProjectId() != null)
	    {
		return false;
	    }
	}
	else if (!this.getProjectId().equals(other.getProjectId()))
	    return false;
	return true;
    }

}

6.//exceptioncontrollerclass (partially implemented)

```

```java
package com.infy.infyinterns.utility;

import java.util.stream.Collectors;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import com.infy.infyinterns.exception.InfyInternException;

@RestControllerAdvice
public class ExceptionControllerAdvice
{

    private static final Log LOGGER = LogFactory.getLog(ExceptionControllerAdvice.class);

    @Autowired
    private Environment environment;

    @ExceptionHandler(InfyInternException.class)
    public ResponseEntity<ErrorInfo> meetingSchedulerExceptionHandler(InfyInternException exception)
    {
	LOGGER.error(exception.getMessage(), exception);
	ErrorInfo errorInfo = new ErrorInfo();
	errorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());
	errorInfo.setErrorMessage(environment.getProperty(exception.getMessage()));
	return new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);
    }

    // add appropriate annotation
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorInfo> generalExceptionHandler(Exception exception)
    {
	LOGGER.error(exception.getMessage(), exception);
	ErrorInfo errorInfo = new ErrorInfo();
	errorInfo.setErrorCode(HttpStatus.INTERNAL_SERVER_ERROR.value());
	errorInfo.setErrorMessage(environment.getProperty("General.EXCEPTION_MESSAGE"));
	return new ResponseEntity<>(errorInfo,
				    HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler({ MethodArgumentNotValidException.class,ConstraintViolationException.class } )
    public ResponseEntity<ErrorInfo> validatorExceptionHandler(Exception exception)
    {
	LOGGER.error(exception.getMessage(), exception);
	String errorMsg;
	if (exception instanceof MethodArgumentNotValidException)
	{
	    MethodArgumentNotValidException manvException = (MethodArgumentNotValidException) exception;
	    errorMsg = manvException.getBindingResult()
				    .getAllErrors()
				    .stream()
				    .map(ObjectError::getDefaultMessage)
				    .collect(Collectors.joining(", "));

	}
	else
	{
	    ConstraintViolationException cvException = (ConstraintViolationException) exception;
	    errorMsg = cvException.getConstraintViolations()
				  .stream()
				  .map(ConstraintViolation::getMessage)
				  .collect(Collectors.joining(", "));

	}
	ErrorInfo errorInfo = new ErrorInfo();
	errorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());
	errorInfo.setErrorMessage(errorMsg);
	return new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);
    }
}

7.//MentorRepository class/interface(to be implemented)

package com.infy.infyinterns.repository;

import java.util.List;

import org.springframework.data.repository.CrudRepository;

import com.infy.infyinterns.entity.Mentor;

public interface MentorRepository extends CrudRepository<Mentor,Integer>
{
    // add methods if required
	List<Mentor>findByNumberOfProjectsMentored(Integer numberOfProjectsMentored);
}

8.  //ProjectRepository class (to be implemented)

package com.infy.infyinterns.repository;

import org.springframework.data.repository.CrudRepository;

import com.infy.infyinterns.entity.Project;

public interface ProjectRepository extends CrudRepository<Project,Integer>
{

    // add methods if required

}

9.  //logging aspect class or utility class( to be implemented)

package com.infy.infyinterns.utility;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;

import com.infy.infyinterns.exception.InfyInternException;

@Component
@Aspect
public class LoggingAspect
{

    private static final Log LOGGER = LogFactory.getLog(LoggingAspect.class);

    
    @AfterThrowing(pointcut = "execution(* com.infyinterns.service.ProjectAllocationServiceImpl.*(..))", throwing = "exception")
    public void logServiceException(InfyInternException exception)
    {
	// code
    	LOGGER.error(exception.getMessage(), exception);
    }

}

10. //InfyInternsApplicationTests class (to be implemented)

package com.infy.infyinterns;

import java.time.LocalDate;
import java.util.Optional;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mocktio;
import org.springframework.boot.test.context.SpringBootTest;

import com.infy.infyinterns.dto.MentorDTO;
import com.infy.infyinterns.dto.ProjectDTO;
import com.infy.infyinterns.entity.Mentor;
import com.infy.infyinterns.exception.InfyInternException;
import com.infy.infyinterns.repository.MentorRepository;
import com.infy.infyinterns.service.ProjectAllocationService;
import com.infy.infyinterns.service.ProjectAllocationServiceImpl;

@SpringBootTest

public class InfyInternsApplicationTests
{

@Mock
private MentorRepository mentorRepository;

@InjectMocks
private ProjectAllocationService projectAllocationService=new ProjectAllocationServiceImpl();

@Test
public void allocateProjectCannotAllocateTest() throws Exception
{
ProjectDTO projectDTO=new ProjectDTO();
projectDTO.setIdeaOwner(10009);
projectDTO.setProjectName("Android Shopping App");
projectDTO.setReleaseDate(LocalDate.of(2019,9,25));
MentorDTO mentorDTO=new MentorDTO();
mentorDTO.setMentorId(1009);
projectDTO.setMentorDTO(mentorDTO);
Mentor mentor=new Mentor();
mentor.setMentorId(1009);
mentor.setMentorName("john");
mentor.setNumberOfProjectsMentored(4);

Mockito.<Optional><Mentor>>when(mentorRespository.findById(mentorDTO.getMentorId())).thenReturn(Optional.of(mentor));
InfyInterException iIE=Assertions.assertThrows(InfyInternException.class,
()->projectAllocationService.allocateProject(projectDTO));
Assertions.assertEquals("Service.CANNOT_ALLOCATE_PROJECT",iIE.getMessage());
}

@Test
**public void allocateProjectMentorNotFoundTest() throws Exception {**

ProjectDTO projectDTO=new ProjectDTO();
projectDTO.setIdeaOwner(1000);
projectDTO.setProjectId(1007);
projectDTO.setProjectName("Project");
projectDTO.setReleaseDate(LocalDate.of(2019,9,25));
MentorDTO mentorDTO=new MentorDTO();
mentorDTO.setMentorId(1002);
projectDTO.setMentorDTO(mentorDTO);

Mockito.<Optional><Mentor>>when(mentorRespository.findById(mentorDTO.getMentorId())).thenReturn(Optional.empty());
InfyInterException iIE=Assertions.assertThrows(InfyInternException.class,
()->projectAllocationService.allocateProject(projectDTO));
Assertions.assertEquals("Service.MENTOR_NOT_FOUND",iIE.getMessage());
	

	**}
}

11.//ProjectAllocationServiceImpl(to be implemented)**

```

```java
package com.infy.infyinterns.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.infy.infyinterns.dto.MentorDTO;
import com.infy.infyinterns.dto.ProjectDTO;
import com.infy.infyinterns.entity.Mentor;
import com.infy.infyinterns.entity.Project;
import com.infy.infyinterns.exception.InfyInternException;
import com.infy.infyinterns.repository.MentorRepository;
import com.infy.infyinterns.repository.ProjectRepository;

@Service(value= "projectService")
@Transactional
public class ProjectAllocationServiceImpl implements ProjectAllocationService {

	@Autowired
	private ProjectRepository projectRepository;
	@Autowired
	private MentorRepository mentorRepository;
	@Override
	public Integer allocateProject(ProjectDTO project) throws InfyInternException {
		Optional<Mentor> opt=mentorRepository.findById(project.getMentorDTO().getMentorId());
		Mentor mentor=opt.orElseThrow(()->new InfyInternException("Service.MENTOR_NOT_FOUND"));
		if(mentor.getNumberOfProjectsMentored()>=3)
		{
			throw new InfyInternException("Service.CANNOT_ALLOCATE_PROJECT");
		}

		Project projectNew=new Project();
		projectNew.setIdeaOwner(project.getIdeaOwner());
		projectNew.setMentor(mentor);
		mentor.setNumberOfProjectsMentored(mentor.getNumberOfProjectsMentored()+1);
		projectNew.setProjectId(project.getProjectId());
		projectNew.setProjectName(project.getProjectName());
		projectNew.setReleaseDate(project.getReleaseDate());
		Project newProject=projectRepository.save(projectNew);
		return newProject.getProjectId();
		
	}

	
	@Override
	public List<MentorDTO> getMentors(Integer numberOfProjectsMentored) throws InfyInternException {
		
		List<Mentor> opt=mentorRepository.findByNumberOfProjectsMentored(numberOfProjectsMentored);
		if(opt.isEmpty())
		{
			throw new InfyInternException("Service.MENTOR_NOT_FOUND");
		}
		
		List<MentorDTO> mentorDTOs=new ArrayList<>();
		for(Mentor mentor:opt)
		{
			MentorDTO mentorDTO=new MentorDTO();
			mentorDTO.setMentorId(mentor.getMentorId());
			mentorDTO.setMentorName(mentor.getMentorName());
			mentorDTO.setNumberOfProjectsMentored(mentor.getNumberOfProjectsMentored());
			mentorDTOs.add(mentorDTO);
		}
		
		
		
		return mentorDTOs;
	}

	@Override
	public void updateProjectMentor(Integer projectId, Integer mentorId) throws InfyInternException 
	{
		Optional<Mentor> ment=mentorRepository.findById(mentorId);
		Mentor mentor=ment.orElseThrow(()->new InfyInternException("Service.MENTOR_NOT_FOUND"));
		if(mentor.getNumberOfProjectsMentored()>=3)
		{
			throw new InfyInternException("Service.CANNOT_ALLOCATE_PROJECT");
		} 
		Optional<Project> proj=projectRepository.findById(projectId);
		Project project=proj.orElseThrow(()->new InfyInternException("Service.PROJECT_NOT_FOUND"));
		project.setMentor(mentor);
		mentor.setNumberOfProjectsMentored(mentor.getNumberOfProjectsMentored()+1);
		
	}

	@Override
	public void deleteProject(Integer projectId) throws InfyInternException 
	{
		
		Optional<Project> proj=projectRepository.findById(projectId);
		
		Project project=proj.orElseThrow(()->new InfyInternException("Service.PROJECT_NOT_FOUND"));
		Mentor mentor=project.getMentor();
		mentor.setNumberOfProjectsMentored(mentor.getNumberOfProjectsMentored()-1);
		project.setMentor(null);
		projectRepository.delete(project);
	}
}
```

# mock solution

```java
pattern 

in exam 

total 6 classes -to be implemented
1.EventRepository ***(interface class extend)-5 min***
2.ParticipantRepository ***(interface class extend)-5min***
3.EventServiceImpl ***(get/set overidden method class)-15min***
4.EventAPI ***(get/put methods class)-10 min***
5.LoggingAspect ***(aspect class/utility class)-10min***
6.EventReistrationApplicationTests ***(test cases class)-10 min***

total 4 classes-partially implemented 

1.Event ***(entity class) -5min***
2.Participant ***(entity class)-5min***
3.ParticipantDTO **(null/not null data validation class)-5min**
4.ExceptionControllerAdvice ***(exception class)-5min 

1. //event api class (to be implemented)***

package com.infy.eventregistration.api;
import java.util.List;

@RestController 
@Validated
@RequestMapping(value ="/event-api")
public class EventAPI
{
@Autowired
private EventService eventService;

@Autowired
private Environment environment;

@PostMapping(value="/events")
public ReponseEntity<String>registerParticipant(@Valid @RequestBody ParticipantDTO participantDTO) throws EventRegistrationException
{
	Integer participantId=eventService.reigsterParticipant(participantDTO);
return new ResponseEntity<String>(environment.getProperty("API.REGISTRATION_SUCCESS")+participantId,HttpStatus.CREATED);
}

@GetMapping(value= "/events/{venue}")
public ResponseEntity<List<ParticipantDTO>> getParticipantsByEventVenue(@PathVariable 
@Pattern(regexp= "[A-Z][0-9]-Hall",message="{event.venue.invalid}") String venue) throws  EventRegistrationException
{
List<ParticipantDTO>participantDTOlist=eventService.getParticipantByEventVenue(venue);
return new ResponseEntity<List<ParticipantDTO>>(participantDTOList,HttpStatus.OK);
}

2. //***particiapnt dto class (partially implemented)***

package com.infy.eventregistration.dto;

import java.time.LocalDate;

public class ParticipantDTO
{

private Integer participantId;

@NotNull(message= "{participant.name.notpresent}")
@Pattern(regexp =" [A-Z][a-z]*( [A-Z][a-z]*)*",message= "{participant.name.invalid}")
private String name;

@NotNull(message= "{participant.emailid.notpresent}")
@Pattern(regexp ="[A-Za-z0-9]+(@infy.com)",message="{particiapnt.emailid.invalid}")
private String emailId;

@NotNull(message="{participant.gender.notpresent}")
@Pattern(regexp = "(Female|Male|Others)",message="{participant.gender.invalid}")
private String gender;

@NotNull(message = "{participant.registrationdate.notpresent}")
private LocalDate registrationDate;

@NotNull(message= "{participant.event.notpresent}")
private EventDTO eventDTO;

public Integer getParticipantId() {
	return participantId;
}

public void setParticipantId(Integer participantId) {
	this.participantId = participantId;
}

public String getName() {
	return name;
}

public void setName(String name) {
	this.name = name;
}

public String getEmailId() {
	return emailId;
}

public void setEmailId(String emailId) {
	this.emailId = emailId;
}

public String getGender() {
	return gender;
}

public void setGender(String gender) {
	this.gender = gender;
}

public LocalDate getRegistrationDate() {
	return registrationDate;
}

public void setRegistrationDate(LocalDate registrationDate) {
	this.registrationDate = registrationDate;
}

public EventDTO getEventDTO() {
	return eventDTO;
}

public void setEventDTO(EventDTO eventDTO) {
	this.eventDTO = eventDTO;
}

}

3. ***//event class (partially implemented)***

package com.infy.eventregistration.entity;

import java.time.LocalDate;

import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class Event
{
	
	@Id
	private Integer eventId;
	private String name;
	private LocalDate eventDate;
	private String venue;
	private Integer maxCount;
	public Integer getEventId() {
		return eventId;
	}
	public void setEventId(Integer eventId) {
		this.eventId = eventId;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public LocalDate getEventDate() {
		return eventDate;
	}
	public void setEventDate(LocalDate eventDate) {
		this.eventDate = eventDate;
	}
	public String getVenue() {
		return venue;
	}
	public void setVenue(String venue) {
		this.venue = venue;
	}
	public Integer getMaxCount() {
		return maxCount;
	}
	public void setMaxCount(Integer maxCount) {
		this.maxCount = maxCount;
	}
	
	
}

4. ***// participant class (partially implemented)***

```

```java
package com.infy.eventregistration.entity;

import java.time.LocalDate;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;

@Entity
public class Participant
{
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer participantId;
	private String name;
	private String emailId;
	private String gender;
	private LocalDate registrationDate;
	@ManyToOne(cascade=CascadeType.ALL)
	@JoinColumn(name= "event_id")
	private Event event;
	
	
	public Integer getParticipantId() {
		return participantId;
	}
	public void setParticipantId(Integer participantId) {
		this.participantId = participantId;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmailId() {
		return emailId;
	}
	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	public LocalDate getRegistrationDate() {
		return registrationDate;
	}
	public void setRegistrationDate(LocalDate registrationDate) {
		this.registrationDate = registrationDate;
	}
	public Event getEvent() {
		return event;
	}
	public void setEvent(Event event) {
		this.event = event;
	}
	
	
	
}
```

```java
5. ***//event repository interface(to be implemented)***

package com.infy.eventregistration.repository;

import org.springframework.data.repository.CrudRepository;

import com.infy.infyinterns.entity.Event;

public interface EventRepository extends CrudRepository<Event,Integer>
{

    // add methods if required
	
	Event findByName(String name);

}

6. /***/ParticipantRepository interface (to be implemented)***

package com.infy.eventregistration.repository;

import java.util.List;

import org.springframework.data.repository.CrudRepository;

import com.infy.infyinterns.entity.Participant;

public interface ParticipantRepository extends CrudRepository<Participant,Integer>
{
    // add methods if required
	List<Participant>findByEventVenue(String venue);
	List<Participant>findByEvent(Event event);
	
}

7. //EventServiceImpl clas(to be implemented)

package com.infy.eventregistration.service;
import java.util.ArrayList;

@Service(value= "eventService")
@Transactional
public class EventServiceImpl implements EventService
{
@Autowired
private EventRepository eventRepository;

@Autowired
private ParticipantRepository participantRepository;

@Override
public Integer registerParticipant(ParticipantDTO participantDTO) throws EventRegistrationException
{
Event event=eventRepository.findByName(participantDTO.getEventDTO().getName());
if(event==null)
{
throw new EventregistrationException("Service.EVENT_UNAVAILABLE");
}

List<Participant> participantList=participantRepository.findByEvent(event);
if(participantList.size()>=event.getMaxCount())
{
throw new EventregistrationException("Service.REGISTRATION_CLOSED");
}
if(participantDTO.getRegistrationDate().isAfter(event.getEventDate().minusDays(3)))
{
throw new EventregistrationException("Service.REGISTRATION_CLOSED");
}
Participant participant=new Participant();
participant.setEmailId(participantDTO.getEmailId());
participant.setEvent(event);
participant.setGender(participantDTO.getGender());
participant.setName(participantDTO.getName());
participant.setRegistrationDate(participantDTO.getRegistrationDate());
Participant saved=participantRepository.save(participant);
return saved.getParticipantId();
}

@Override
public List<ParticipantDTO> getParticipantsByEventVenue(String venue) throws EventRegistrationException
{
List<Participant> participantList=participantRepository.findByEventVenue(venue);
if(participantList.isEmpty())
{
throw new EventregistrationException("Service.PARTICIPANTS_UNAVAILABLE");
}

List<ParticipantDTO> participantDTOList=new ArrayList<ParticipantDTO>();
for(Participant p: participantList)
{
ParticipantDTO participantDTO=new ParticipantDTO();
participantDTO.setEmailId(p.getEmailId());
Event event=p.getEvent();
EventDTO eventDTO=new EventDTO();
eventDTO.setEventDate(event.getEventDate());
eventDTO.setEventId(event.getEventId());
eventDTO.setMaxCount(event.getMaxCount());
eventDTO.setName(event.getName());
eventDTO.setVenue(event.getVenue());
participantDTO.setEventDTO(eventDTO);
participantDTO.setGender(p.getGender());
participantDTO.setName(p.getName());
participantDTO.setParticipantId(p.getName());
participantDTO.setRegistrationDate(p.getRegistrationDate());
participantDTOList.add(participantDTO);
}
return participantDTOList;
}

8. //ExceptionControllerAdvice(partially implemented)

package com.infy.eventregistration.service;

import java.util.stream.Collectors;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import com.infy.infyinterns.exception.EventRegistrationException;

@RestControllerAdvice
public class ExceptionControllerAdvice
{

    private static final Log LOGGER = LogFactory.getLog(ExceptionControllerAdvice.class);

    @Autowired
    private Environment environment;

    @ExceptionHandler(EventRegistrationException.class)
    public ResponseEntity<ErrorInfo> eventRegistrationExceptionHandler(EventRegistrationException exception)
    {
	LOGGER.error(exception.getMessage(), exception);
	ErrorInfo errorInfo = new ErrorInfo();
	errorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());
	errorInfo.setErrorMessage(environment.getProperty(exception.getMessage()));
	return new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);
    }

    // add appropriate annotation
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorInfo> generalExceptionHandler(Exception exception)
    {
	LOGGER.error(exception.getMessage(), exception);
	ErrorInfo errorInfo = new ErrorInfo();
	errorInfo.setErrorCode(HttpStatus.INTERNAL_SERVER_ERROR.value());
	errorInfo.setErrorMessage(environment.getProperty("General.EXCEPTION_MESSAGE"));
	return new ResponseEntity<>(errorInfo,
				    HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler({ MethodArgumentNotValidException.class,ConstraintViolationException.class } )
    public ResponseEntity<ErrorInfo> validatorExceptionHandler(Exception exception)
    {
	LOGGER.error(exception.getMessage(), exception);
	String errorMsg;
	if (exception instanceof MethodArgumentNotValidException)
	{
	    MethodArgumentNotValidException manvException = (MethodArgumentNotValidException) exception;
	    errorMsg = manvException.getBindingResult()
				    .getAllErrors()
				    .stream()
				    .map(ObjectError::getDefaultMessage)
				    .collect(Collectors.joining(", "));

	}
	else
	{
	    ConstraintViolationException cvException = (ConstraintViolationException) exception;
	    errorMsg = cvException.getConstraintViolations()
				  .stream()
				  .map(ConstraintViolation::getMessage)
				  .collect(Collectors.joining(", "));

	}
	ErrorInfo errorInfo = new ErrorInfo();
	errorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());
	errorInfo.setErrorMessage(errorMsg);
	return new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);
    }
}

9 . //LoggingAspect (to be implemented class)

package com.infy.eventregistration.service;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;

import com.infy.infyinterns.exception.EventRegistrationException;

@Component
@Aspect
public class LoggingAspect
{

    private static final Log LOGGER = LogFactory.getLog(LoggingAspect.class);

    
    @AfterThrowing(pointcut = "execution(* com.eventregistration.service.*Impl.*(..))", throwing = "exception")
    public void logServiceException(InfyInternException exception)
    {
	// code
    	LOGGER.error(exception.getMessage(), exception);
    }

}

10.//EventReistrationApplicationTests class(to be implemented)

package com.infy.EventRegistration;

import java.time.LocalDate;
import java.util.Optional;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mocktio;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest

public class EventRegistrationApplicationTests
{

@Mock
private EventRepository eventRepository;

@Mock
private ParticipantRepository participantRepository;

@InjectMocks
private EventService eventService=new EventServiceImpl();

@Test
public void getParticipantsByEventVenueNoParticipantsFoundTest() 
{
String name="A6-HALL";
List<Participant> x=new ArrayList<>();

Mockito.when(participantRepository.findByEventVenue(Mockito.anyString())).thenReturn(x);
EventRegistrationException e=Assertions.assertThrows(EventRegistrationException.class,
()->eventService.getParticipantsByEventVenue(name));
Assertions.assertEquals("Service.PARTICIPANTS_UNAVAILABLE",e.getMessage());
}

@Test
public void registerParticipantNoEventFoundTest() {

ParticipantDTO x=new ParticipantDTO();
x.setName("Dancing");
Event e=new Event();

Mockito.when(eventRepository.findByName(Mockito.anyString())).thenReturn(null);
EventRegistrationException e2=Assertions.assertThrows(EventRegistrationException.class,
()->eventService.registerParticipant(x));
Assertions.assertEquals("Service.EVENT_UNAVAILABLE",e2.getMessage());
	

	}
}
```

# infy cars

```java

1. ***// InfyCars247API (to be implemented)***

package com.infy.api;
import java.util.List;
import javax.validation.Valid;

@RestController 
@Validated
@RequestMapping("/infyCars247-api")
public class InfyCars247API
{
@Autowired
private InfyCars247Service infyCars247Service;

@Autowired
private Environment environment;

@PostMapping("/cars")
public ReponseEntity<String> sellCar(@Valid @RequestBody CarDTO carDTO) throws InfyCars247Exception
{
	Integer carId=infyCars247Service.sellCar(carDTO);
String successMsg=environment.getProperty("API.CAR_REGISTERED_SUCCESS")+carId
return new ResponseEntity<String>(successMsg,HttpStatus.CREATED);
}

@GetMapping(value= "/users/{phoneNumber}")
public ResponseEntity<RegistrationDTO> getUserDetails(
@Pattern(regexp= "[1-9][0-9]{9}",message="{registration.userphone.invalid}") @PathVariable  String venue) throws InfyCars247Exception
{

return new ResponseEntity<>(infyCars247Service.getUserDetailsByPhone(phoneNumber),HttpStatus.FOUND);
}
}

2.//CarDTO(partially implemennted)

package com.infy.dto;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;

public class CarDTO
{
	private Integer carId;
	private String model;
	private String manufacturer;
	@NotNull(message= "{car.yearofmanufacturing.absent}")
	@Min(value=1900,message="{car.yearofmanufacturing.invalid}")
	private Integer yearOfManufacturing;
	private Integer quotedPrice;
	private Integer finalPrice;
	private Float review;
	@NotNull(message="{car.registration.absent}")
	@Valid
	private RegistrationDTO registrationDTO;
	public Integer getCarId() {
		return carId;
	}
	public void setCarId(Integer carId) {
		this.carId = carId;
	}
	public String getModel() {
		return model;
	}
	public void setModel(String model) {
		this.model = model;
	}
	public String getManufacturer() {
		return manufacturer;
	}
	public void setManufacturer(String manufacturer) {
		this.manufacturer = manufacturer;
	}
	public Integer getYearOfManufacturing() {
		return yearOfManufacturing;
	}
	public void setYearOfManufacturing(Integer yearOfManufacturing) {
		this.yearOfManufacturing = yearOfManufacturing;
	}
	public Integer getQuotedPrice() {
		return quotedPrice;
	}
	public void setQuotedPrice(Integer quotedPrice) {
		this.quotedPrice = quotedPrice;
	}
	public Integer getFinalPrice() {
		return finalPrice;
	}
	public void setFinalPrice(Integer finalPrice) {
		this.finalPrice = finalPrice;
	}
	public Float getReview() {
		return review;
	}
	public void setReview(Float review) {
		this.review = review;
	}
	public RegistrationDTO getRegistrationDTO() {
		return registrationDTO;
	}
	public void setRegistrationDTO(RegistrationDTO registrationDTO) {
		this.registrationDTO = registrationDTO;
	}
}

3. ***//RegistrationDTO (partially implemented)***

package com.infy.dto;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

public class RegistrationDTO
{
	private Integer registrationId;
	private String userName;
	@NotNull(message= "{registration.userphone.absent}")
	@Pattern(regexp = "[1-9][0-9]{9}",message="{registration.userphone.invalid}")
	private String userPhone;
	private String userEmail;
	public Integer getRegistrationId() {
		return registrationId;
	}
	public void setRegistrationId(Integer registrationId) {
		this.registrationId = registrationId;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public String getUserPhone() {
		return userPhone;
	}
	public void setUserPhone(String userPhone) {
		this.userPhone = userPhone;
	}
	public String getUserEmail() {
		return userEmail;
	}
	public void setUserEmail(String userEmail) {
		this.userEmail = userEmail;
	}
	
}

4.  ***//car class(partially implemented)***

package com.infy.entity;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

@Entity
@Table(name= "cars")
public class Car
{
	@Id
	@GeneratedValue(strategy =GenerationType.IDENTITY)
	private Integer carId;
	private String model;
	private String manufacturer;
	private Integer yearOfManufacturing;
	private Integer quotedPrice;
	private Integer finalPrice;
	private Float review;
	@ManyToOne(cascade=CascadeType.ALL)
	@JoinColumn(name = "registration_id")
	private RegistrationDTO registrationDTO;
	
	
	public Integer getCarId() {
		return carId;
	}
	public void setCarId(Integer carId) {
		this.carId = carId;
	}
	public String getModel() {
		return model;
	}
	public void setModel(String model) {
		this.model = model;
	}
	public String getManufacturer() {
		return manufacturer;
	}
	public void setManufacturer(String manufacturer) {
		this.manufacturer = manufacturer;
	}
	public Integer getYearOfManufacturing() {
		return yearOfManufacturing;
	}
	public void setYearOfManufacturing(Integer yearOfManufacturing) {
		this.yearOfManufacturing = yearOfManufacturing;
	}
	public Integer getQuotedPrice() {
		return quotedPrice;
	}
	public void setQuotedPrice(Integer quotedPrice) {
		this.quotedPrice = quotedPrice;
	}
	public Integer getFinalPrice() {
		return finalPrice;
	}
	public void setFinalPrice(Integer finalPrice) {
		this.finalPrice = finalPrice;
	}
	public Float getReview() {
		return review;
	}
	public void setReview(Float review) {
		this.review = review;
	}
	public RegistrationDTO getRegistrationDTO() {
		return registrationDTO;
	}
	public void setRegistrationDTO(RegistrationDTO registrationDTO) {
		this.registrationDTO = registrationDTO;
	}
}

5. //registration class(entity class) partially implemented

package com.infy.entity;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name= "registration")
public class Registration
{
	@Id
	private Integer registrationId;
	private String userName;
	private String userPhone;
	private String userEmail;
	
	
	public Integer getRegistrationId() {
		return registrationId;
	}
	public void setRegistrationId(Integer registrationId) {
		this.registrationId = registrationId;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public String getUserPhone() {
		return userPhone;
	}
	public void setUserPhone(String userPhone) {
		this.userPhone = userPhone;
	}
	public String getUserEmail() {
		return userEmail;
	}
	public void setUserEmail(String userEmail) {
		this.userEmail = userEmail;
	}
	
}

6. ***//carrepository interface(to be implemented)***

package com.infy.repository;

import org.springframework.data.repository.CrudRepository;

public interface CarRepository extends CrudRepository<Car,Integer>
{

    // add methods if required
	@Query("select avg(c.review) from Car c where c.registration.registrationId=?1")
	Float getAvgReview(Integer registrationId);

}

7. //RegistrationRepository ***interface (to be implemented)***

package com.infy.repository;

import org.springframework.data.repository.CrudRepository;

public interface RegistrationRepository extends CrudRepository<Registration,Integer>
{
  
Registration findByUserPhone(String phoneNumber);
	
}

8. //InfyCars247ServiceImpl.java 

package com.infy.service;
import java.util.ArrayList;

@Service("infyCars247Service")
@Transactional
public class EventServiceImpl implements EventService
{
@Autowired
private CarRepository carRepository;

@Autowired
private RegistrationRepository registrationRepository;

@Override
public Integer sellCar(carDTO carDTO) throws InfyCars247Exception
{
Registration registration=registrationRepository.findByUserPhone(carDTO.getRegistrationDTO().getUserPhone());
if(event==null)
{
throw new InfyCars247Exception("Service.USER_PROFILE_NOT_FOUND");
}
Float avgReview=carRepository.getAvgReview(registration.getregistrationId());
if(avgReview<3.5)
{
throw new InfyCars247Exception("Service.POOR_SELLER_REVIEW");
}

Car car=new Car():
car.setManufacturer(carDTO.getManufacturer());
car.setModel(carDTO.getModel());
car.setQuotedPrice(carDTO.getQuotedPrice());
car.setYearOfManufacturing(carDTO.getYearOfManufacturing());
car.setRegistration(registration);
car.setFinalPrice(null);
car.setReview(null);
car=carRepository.save(car);
return car.getCarId();
}

@Override
public RegistrationDTO getUserDetailsByPhone(String phoneNumber) throws InfyCars247Exception
{
Registration registration=registrationRepository.findByUserPhone(phoneNumber);
if(registration==null)
{
throw new InfyCars247Exception("Service.USER_PROFILE_NOT_FOUND");
}

RegistrationDTO registrationDTO=new RegistrationDTO();
registratonDTO.setUserEmail(registration.getUserEmail());
registratonDTO.setUserName(registration.getUserName());
registratonDTO.setUserPhone(registration.getUserPhone());
registratonDTO.setRegistrationId(registration.getRegistrationId());
return registrationDTO;
}

9.//loggin aspect to be implemented class

package com.infy.service;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;

import com.infy.infyinterns.exception.InfyCars247Exception;

@Component
@Aspect
public class LoggingAspect
{

    private static final Log LOGGER = LogFactory.getLog(LoggingAspect.class);

    
    @AfterThrowing(pointcut = "execution(* com.infy.service.InfyCars247ServiceImpl.*(..))", throwing = "exception")
    public void logServiceException(InfyInternException exception)
    {
	// code
    	LOGGER.error(exception.getMessage(), exception);
    }

}

10. //ExceptionControllerAdvice partially implemented

```

```java
package com.infy.eventregistration.service;

import java.util.stream.Collectors;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import com.infy.infyinterns.exception.InfyCars247Exception;

@RestControllerAdvice
public class ExceptionControllerAdvice
{

    private static final Log LOGGER = LogFactory.getLog(ExceptionControllerAdvice.class);

    @Autowired
    private Environment environment;

    @ExceptionHandler(InfyCars247Exception.class)
    public ResponseEntity<ErrorInfo> eventRegistrationExceptionHandler(EventRegistrationException exception)
    {
	LOGGER.error(exception.getMessage(), exception);
	ErrorInfo errorInfo = new ErrorInfo();
	errorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());
	errorInfo.setErrorMessage(environment.getProperty(exception.getMessage()));
	return new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);
    }

    // add appropriate annotation
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorInfo> generalExceptionHandler(Exception exception)
    {
	LOGGER.error(exception.getMessage(), exception);
	ErrorInfo errorInfo = new ErrorInfo();
	errorInfo.setErrorCode(HttpStatus.INTERNAL_SERVER_ERROR.value());
	errorInfo.setErrorMessage(environment.getProperty("General.EXCEPTION_MESSAGE"));
	return new ResponseEntity<>(errorInfo,
				    HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler({ MethodArgumentNotValidException.class,ConstraintViolationException.class } )
    public ResponseEntity<ErrorInfo> validatorExceptionHandler(Exception exception)
    {
	LOGGER.error(exception.getMessage(), exception);
	String errorMsg;
	if (exception instanceof MethodArgumentNotValidException)
	{
	    MethodArgumentNotValidException manvException = (MethodArgumentNotValidException) exception;
	    errorMsg = manvException.getBindingResult()
				    .getAllErrors()
				    .stream()
				    .map(ObjectError::getDefaultMessage)
				    .collect(Collectors.joining(", "));

	}
	else
	{
	    ConstraintViolationException cvException = (ConstraintViolationException) exception;
	    errorMsg = cvException.getConstraintViolations()
				  .stream()
				  .map(ConstraintViolation::getMessage)
				  .collect(Collectors.joining(", "));

	}
	ErrorInfo errorInfo = new ErrorInfo();
	errorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());
	errorInfo.setErrorMessage(errorMsg);
	return new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);
    }
}

11. //test class 

package com.infy.EventRegistration;

import java.time.LocalDate;
import java.util.Optional;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mocktio;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class InfyCars247ApplicationTests
{

@Mock
private CarRepository carRepository;

@Mock
private RegistrationRepository registrationRepository;

@InjectMocks
private InfyCars247Service infyCars247Service=new InfyCars247ServiceImpl();

@Test
public void sellCarInvalidUserPhoneNumberTest() 
{
String phoneNumber="9636245681";

Mockito.when(participantRepository.findByUserPhone(Mockito.anyString())).thenReturn(null);
InfyCars247Exception e=Assertions.assertThrows(InfyCars247Exception.class,
()->infyCars247Service.getUserDetailsByPhone(phoneNumber));
Assertions.assertEquals("Service.USER_PROFILE_NOT_fOUND",e.getMessage());
}

@Test
public void sellCarInvalidReviewTest() {

Float avgReview=3.0f
RegistrationDTO registrationDTO=new RegistrationDTO();
registrationDTO.setRegistrationId(1001);
registrationDTO.setUserEmail("abc@infy.com");
registrationDTO.setUserName("abc");
registrationDTO.setUserPhone("9636245681");

CarDTO carDTO=new CarDTO();
carDTO.setCarId(1001);
carDTO.setFinalPrice(null);
carDTO.setManufacturer("ABC");
carDTO.setModel("BC")
carDTO.setQuotedPrice(100);
carDTO.setReview(3.0f);
carDTO.setYearOfManufacturing(2000);
carDTO.setRegistrationDTO(registrationDTO);

Registration reg=new Registration();

reg.setRegistrationId(1001);
reg.setUserEmail("abc@infy.com")
reg.setUserName("abc");
reg.setUserPhone("9636245681")

Mockito.when(registrationRepository.findByUserPhone(Mockito.anyString())).thenReturn(reg);
Mockito.when(carRepository.getAvgReview(reg.getRegistrationId()).thenReturn(avgReview);
InfyCars247Exception e1=Assertions.assertThrows(InfyCars247Exception.class,
()->infyCars247Service.sellCar(carDTO));
Assertions.assertEquals("Service.POOR_SELLER_REVIEW",e2.getMessage());
}
	

	}
}
```

# user data

```java
1.//UserDataRepository 

package com.infy.userdata.repository;

import org.springframework.data.repository.CrudRepository;
import com.infy.userdata.entity.User;

public interface UserDataRepository extends CrudRepository<User,String>
{
  
List<User> findByUserName(String UserName);
	
}

2. ***//UserDataApi (to be implemented)***

package com.infy.api;
import java.util.List;
import javax.validation.Valid;

@RestController 
@RequestMapping(value="api")
public class UserDataAPI
{
@Autowired
private UserDataService userDataService;

@Autowired
private Environment environment;

@PostMapping(value="/user")
public ReponseEntity<String> addUser(@RequestBody UserDTO userDTO) throws UserDataException
{
Integer userId=userDataService.addUser(userDTO);
return new ResponseEntity<>(environment.getProperty("API.ADDITION_SUCCESS")+":"userId,HttpStatus.CREATED);
}

@GetMapping(value= "/users/{userName}")
public ResponseEntity<List<UserDTO>> getDetailsByUserName(@PathVariable String userName) throws UserDataException
{
return new ResponseEntity<>(userDataService.getDetailsByUserName(userName),HttpStatus.OK);
}
}

3./***/user class (entity class)***

```

```java
package com.infy.userdata.entity

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="userdata")
public class User
{
	
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Integer userId;
	private String userName;
	private String password;
	private Long phoneNo;
	private String city;
	public Integer getUserId() {
		return userId;
	}
	public void setUserId(Integer userId) {
		this.userId = userId;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public Long getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(Long phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}
}

4.//***UserDataServiceImpl*** 

package com.infy.service;
import java.util.ArrayList;

@Service(value="userDataService")
@Transactional
public class UserDataServiceImpl implements UserDataService
{
@Autowired
private UserDataRepository userDataRepository;

@Override
public Integer addUser(UserDTO userDTO) throws UserDataException
{
UserValidator userValidator=new UserValidator();
userValidator.validate(userDTO);
User user=new user();
user.setCity(userDTO.getCity());
user.setPassword(userDTO.getPassword());
user.setPhoneNo(userDTO.getPhoneNo());
user.setUserId(userDTO.getUserId());
user.setUserName(userDTO.getUserName());
return user.getUserId();
}

@Override
public List<UserDTO> getDetailsByUserName(String userName) throws UserDataException
{
List<User> opt=userDataRepository.findByUserName(userName);

if(opt.isEmpty())
{
throw new UserDataException("Service.NO_DETAILS_FOUND");
}

List<UserDTO> userDTOs=new ArrayList<>();

for(User user:opt)
{
UserDTO u1=new UserDTO();

u1.setCity(user.getCity());
u1.setPassword(user.getPassword());
u1.setPhoneNo(user.getPhoneNo());
u1.setUserId(user.getUserId());
u1.setUserName(user.getUserName());
userDTOs.add(u1);
}
return userDTOs;
}

5.***//logging aspect class or utility class( to be implemented)***

package com.infy.infyinterns.utility;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;

import com.infy.infyinterns.exception.UserDataException;

@Component
@Aspect
public class LoggingAspect
{

    private static final Log LOGGER = LogFactory.getLog(LoggingAspect.class);

    
    @AfterThrowing(pointcut = "execution(* com.infy.userdata.service.UserDataServiceImpl.*(..))", throwing = "exception")
    public void logServiceException(UserDataException exception)
    {
	// code
    	LOGGER.error(exception.getMessage(), exception);
    }

}

6.//test class 

package com.infy.userdata;

import java.time.LocalDate;
import java.util.Optional;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mocktio;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class UserDataApplicationTests
{

@Mock
private UserRepository userRepository;

@InjectMocks
private UserDataService userDataService=new UserDataServiceImpl();

@Test
public void getDetailsByUserNameNoDetailsFound() 
{
UserDTO userDTO=new UserDTO();
userDTO.setCity("Bangalore");
userDTO.setPassword("Chris12345");
userDTO.setPhoneNo(9034876756L);
userDTO.setUserId(2000);
userDTO.setUserName("Chris");

List<User> users=new ArrayList<>();
User u=new User();

u.setCity("Bangalore");
u.setPassword("Chris12345");
u.setPhoneNo(9034876756L);
u.setUserId(2000);
u.setUserName("Prince");

users.add(u);

UserDTO user1=new UserDTO();
user1.setCity("Bangalore");
user2.setPassword("Chris12345");
user3.setPhoneNo(9034876756L);
user4.setUserId(2000);
user5.setUserName("Prince");

Mockito.<List><User>>when(userDataRespository.findByUserName(userDTO.getUserName())).thenReturn(users);
UserDataException ude=Assertions.assertThrows(UserDataException.class,
()->userDataService.getDetailsByUserName(u.getUserName()));
Assertions.assertEquals("Service.NO_DETAILS_FOUND",ude.getMessage());
}

****
```

# cab booking

```java
1.//api class to be implemented 

package com.infy.cabbooking.api;
import java.util.List;

@RestController 
@RequestMapping(value ="api")
public class CabBookingAPI
{
@Autowired
private CabBookingService cabBookingService;

@Autowired
private Environment environment;

@GetMapping(value= "cab/{bookingType}")
public ResponseEntity<List<BookingDTO>> getDetailsByBookingType(@PathVariable String bookingType)  throws  CabBookingException

{
return new ResponseEntity<>(cabBookingService.getDetailsByBookingType(bookingType);,HttpStatus.OK);
}

@PostMapping(value="cab")
public ReponseEntity<String>bookCab( @RequestBody BookingDTO bookingDTO) throws CabBookingException
{
	Integer bookId=cabBookingService.bookCab(bookingDTO);
return new ResponseEntity<>(environment.getProperty("API.BOOKING_SUCCESS")+":"bookId,HttpStatus.CREATED);
}

2. //booking.java entity class 

package com.infy.cabbooking.entity;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

@Entity
@Table(name="booking")
public class Booking
{
	
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Integer bookingId;
	private String customerName;
	private Long phoneNo;
	private String bookingType;
	
	@OneToOne(cascade=CascadeType.ALL)
	@JoinColumn(name="cab_no",unique=true)
	private Cab cab;

	public Integer getBookingId() {
		return bookingId;
	}

	public void setBookingId(Integer bookingId) {
		this.bookingId = bookingId;
	}

	public String getCustomerName() {
		return customerName;
	}

	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}

	public Long getPhoneNo() {
		return phoneNo;
	}

	public void setPhoneNo(Long phoneNo) {
		this.phoneNo = phoneNo;
	}

	public String getBookingType() {
		return bookingType;
	}

	public void setBookingType(String bookingType) {
		this.bookingType = bookingType;
	}

	public Cab getCab() {
		return cab;
	}

	public void setCab(Cab cab) {
		this.cab = cab;
	}
}

3/.//entity class 

package com.infy.cabbooking.entity;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="cab")
public class Cab
{
	@Id
	private Integer cabNo;
	private String modelName;
	private Long driverPhoneNo;
	private String availablity;
	public Integer getCabNo() {
		return cabNo;
	}
	public void setCabNo(Integer cabNo) {
		this.cabNo = cabNo;
	}
	public String getModelName() {
		return modelName;
	}
	public void setModelName(String modelName) {
		this.modelName = modelName;
	}
	public Long getDriverPhoneNo() {
		return driverPhoneNo;
	}
	public void setDriverPhoneNo(Long driverPhoneNo) {
		this.driverPhoneNo = driverPhoneNo;
	}
	public String getAvailablity() {
		return availablity;
	}
	public void setAvailablity(String availablity) {
		this.availablity = availablity;
	}
	
	
}

4. ***//BookingRespotiry interface(to be implemented)***

package com.infy.repository;

import org.springframework.data.repository.CrudRepository;

public interface BookingRepository extends CrudRepository<Booking,Integer>
{

  List<Booking> findByBookingType(String BookingType);

}

5. //CabRepository ***interface (to be implemented)***

package com.infy.repository;

import org.springframework.data.repository.CrudRepository;

public interface CabRepository extends CrudRepository<Cab,Integer>
{
  

	
}

6. //serviceimpl class 

package com.infy.service;
import java.util.ArrayList;

@Service(value="CabBookingService")
@Transactional
public class CabBookingServiceImpl implements CabBookingService
{
@Autowired
private BookingRepository bookingRepository;

@Autowired
private CabRepository cabRepository;

@Override
public List<BookingDTO> getDetailsByBookingType(String bookingType) throws CabBookingException
{
List<Booking> w1=bookingRepository.findByBookingType(bookingType);
if(w1.isEmpty())
{
throw new CabBookingException("Service.NO_DETAILS_FOUND");
}

for(Booking booking:w1)
{
BookingDTO b=new BookingDTO();
b.setBookingId(booking.getBookingId());
b.setCustomerName(booking.getCustomerName());
b.setBookingType(booking.getBookingType());
b.setPhoneNo(Booking.getPhoneNo());

CabDTO c=new CabDTO();

c.setCabNo(booking.getCab().getCabNo());
c.setModelName(booking.getCab().getModelName());
c.setAvailability(booking.getCab().getAvailability());
b.setCabDTO(c);
bookingDTOs.add(b);
}
return bookingDTOs;
}

@Override
public Integer bookCab(BookingDTO bookingDTO) throws CabBookingException
{
BookingValidator bookingValidator=new BookingValidator();
bookingValidator.validate(bookingDTO);
Optional<Cab> w1=cabRepository.findById(bookingDTO.getCabDTO().getCabNo());

Cab cab=w1.orElseThrow(()->new CabBookingException("SERVICE.CAB_NOT_FOUND"));
if(cab.getAvailability().equals("No"))
{
throw new CabBookingException("Service.CAB_NOT_AVAILABLE");
}

Booking book=new Booking();

book.setBookingType(bookingDTO.getBookingType());
book.setCustomerName(bookingDTO.getCustomerName());
book.setPhoneNo(bookingDTO.getPhoneNo());
cab.setAvailability("No");
book.setCab(cab);
bookingRepository.save(book);

return book.getBookingId();
}

7.//test class 

package com.infy.cabbooking;

import java.time.LocalDate;
import java.util.Optional;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mocktio;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class CabBookingApplicationTests
{

@Mock
private CabRepository cabRepository;

@Mock
private BookingRepository bookingrepository;

@InjectMocks
private CabBookingService cabBookingService=new CabBookingServiceImpl();

@Test
public void bookCabInvalidCabNoTest() throws Exception
{
BookingDTO bookingDTO=new BookingDTO();
bookingDTO.setCustomerName("Robert");
bookingDTO.setBookingId(1001);
bookingDTO.setPhoneNo(9867542341L);
bookingDTO.setBookingType("Personal");

CabDTO cabDTO=new CabDTO();
cabDTO.setCabNo(451678)
cabDTO.setDriverPhoneNo(9947835654L);
cabDTO.setModelName("Toyota");
cabDTO.setAvailability("Yes");

bookingDTO.setCabDTO(cabDTO);
CabDTO cab=new CabDTO();
cab.setCabNo(159721);
cab.setDriverPhoneNo(9947835654L);
cab.setAvailability("Yes");
cab.setModelName("Toyota");

Mockito.<Optional><cab>>when(cabRespository.findById(cabDTO.getCabNo())).thenReturn(Optional.empty());
CabBookingException e=Assertions.assertThrows(CabBookingException.class,
()->cabBookingService.bookCab(bookingDTO));
Assertions.assertEquals("Service.CAB_NOT_FOUND",e.getMessage());
}

@Test
public void getDetailByBookingTypeNoDetailFound() throws Exception
{
BookingDTO bookingDTO=new BookingDTO();
bookingDTO.setCustomerName("Robert");
bookingDTO.setBookingId(1001);
bookingDTO.setPhoneNo(9867542341L);
bookingDTO.setBookingType("Shared");

CabDTO cabDTO=new CabDTO();
cabDTO.setDriverPhoneNo(9947835654L);
cabDTO.setModelName("Toyota");
cabDTO.setAvailability("Yes");
bookingDTO.setCabDTO(cabDTO);

List<Booking> bookings=new ArrayList<>();
Booking b=new Booking();
b.setCustomerName("Robert");
b.setBookingId(1001);
b.setPhoneNo(9867542341L);
b.setBookingType("Share");

Cab cab=new Cab();
cab.setDriverPhoneNo(9947835654L);
cab.setAvailability("Yes");
cab.setModelName("Toyota");
b.setCab(cab);
bookings.add(b);

BookingDTO booking1=new BookingDTO();
booking1.setCustomerName("Robert");
booking1.setBookingId(1001);
booking1.setPhoneNo(9867542341L);
booking1.setBookingType("Share");

CabDTO cab1=new CabDTO();
cab1.setDriverPhoneNo(9947835654L);
cab1.setModelName("Toyota");
cab1.setAvailability(cab1);

booking1.setCabDTO(cab1);

Mockito.<List<Booking>>when(bookingRespository.findByBookingType(bookingDTO.getBookingType())).thenReturn(bookings);
CabBookingException e=Assertions.assertThrows(CabBookingException.class,
()->cabBookingService.getDetailsByBookingType(booking1.getBookingType()));
Assertions.assertEquals("Service.NO_DETAILS_FOUND",e.getMessage());
}

```
